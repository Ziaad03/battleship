(()=>{"use strict";var e={208:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),a=t.n(r),o=t(314),s=t.n(o)()(a());s.push([e.id,"/* style.css */\n\n/* Add your CSS styles here */\nbody {\n  font-family: Arial, sans-serif;\n  background-color: #f2f2f2;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: #333;\n  text-align: center;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n/* Add more styles as needed */\n#game-board {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  grid-gap: 10px;\n  justify-items: center;\n  align-items: center;\n}\n\n.player-board {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  gap: 1px;\n}\n\n.cells {\n  border: 1px solid;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 30px;\n  font-weight: bold;\n}\n.cells:hover {\n  background-color: #665e5e;\n}\n.ship {\n  background-color: #3e4640; /* Grey for ships */\n}\n\n.hit {\n  background-color: #f00; /* Red for hits */\n}\n\n.miss {\n  background-color: #0f0; /* Green for misses */\n}\n\n.empty {\n  background-color: #dad2d2; /* White for empty cells */\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,cAAc;;AAEd,6BAA6B;AAC7B;EACE,8BAA8B;EAC9B,yBAAyB;EACzB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,aAAa;AACf;;AAEA,8BAA8B;AAC9B;EACE,aAAa;EACb,qCAAqC;EACrC,kCAAkC;EAClC,cAAc;EACd,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,QAAQ;AACV;;AAEA;EACE,iBAAiB;EACjB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB,EAAE,mBAAmB;AAChD;;AAEA;EACE,sBAAsB,EAAE,iBAAiB;AAC3C;;AAEA;EACE,sBAAsB,EAAE,qBAAqB;AAC/C;;AAEA;EACE,yBAAyB,EAAE,0BAA0B;AACvD",sourcesContent:["/* style.css */\n\n/* Add your CSS styles here */\nbody {\n  font-family: Arial, sans-serif;\n  background-color: #f2f2f2;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: #333;\n  text-align: center;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n/* Add more styles as needed */\n#game-board {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  grid-gap: 10px;\n  justify-items: center;\n  align-items: center;\n}\n\n.player-board {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  gap: 1px;\n}\n\n.cells {\n  border: 1px solid;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 30px;\n  font-weight: bold;\n}\n.cells:hover {\n  background-color: #665e5e;\n}\n.ship {\n  background-color: #3e4640; /* Grey for ships */\n}\n\n.hit {\n  background-color: #f00; /* Red for hits */\n}\n\n.miss {\n  background-color: #0f0; /* Green for misses */\n}\n\n.empty {\n  background-color: #dad2d2; /* White for empty cells */\n}\n"],sourceRoot:""}]);const i=s},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&s[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var c=e[i],l=r.base?c[0]+r.base:c[0],d=o[l]||0,A="".concat(l," ").concat(d);o[l]=d+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=a(u,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:f,references:1})}s.push(A)}return s}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=t(o[s]);n[i].references--}for(var c=r(e,a),l=0;l<o.length;l++){var d=t(o[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r=t(72),a=t.n(r),o=t(825),s=t.n(o),i=t(659),c=t.n(i),l=t(56),d=t.n(l),A=t(540),p=t.n(A),u=t(113),f=t.n(u),h=t(208),m={};m.styleTagTransform=f(),m.setAttributes=d(),m.insert=c().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=p(),a()(h.A,m),h.A&&h.A.locals&&h.A.locals;const y=class{constructor(){this.board=new Array(10).fill(null).map((()=>new Array(10).fill(null))),this.missedAttacks=[],this.ships=[]}placeShip(e,n,t,r){if(n<0||n>9||t<0||t>9)throw new Error("Invalid row or column");if("vertical"===r){if(n+(e.length-1)>9)return!1;for(let r=0;r<e.length;r++)if(this.board[n+r][t])return!1;for(let r=0;r<e.length;r++)this.board[n+r][t]=e}else{if(t+(e.length-1)>9)return!1;for(let r=0;r<e.length;r++)if(this.board[n][t+r])return!1;for(let r=0;r<e.length;r++)this.board[n][t+r]=e}return this.ships.push(e),!0}receiveAttack(e,n){if(e<0||e>9||n<0||n>9)throw new Error("Invalid row or column");return null===this.board[e][n]?(this.missedAttacks.push([e,n]),this.board[e][n]="miss",!1):"hit"!==this.board[e][n]&&(this.board[e][n].hit(),this.board[e][n]="hit",!0)}allShipsSunk(){return this.ships.every((e=>e.isSunk()))}},g=class{constructor(e){this.name=e,this.gameBoard=new y}fireShot(e,n,t){t.receiveAttack(e,n)}playerPlaceShip(e,n,t,r){this.gameBoard.placeShip(e,n,t,r)}getBoard(){return this.gameBoard.board}},E=class{constructor(e){this.length=e,this.hits=0}hit(){this.isSunk()||this.hits++}isSunk(){return this.hits===this.length}};function B(e){const n=document.getElementById("player-1-board");n.innerHTML="",console.log(e);let t=e.getBoard();for(let e=0;e<10;e++)for(let r=0;r<10;r++){const a=document.createElement("div");a.dataset.row=e,a.dataset.col=r,t[e][r]instanceof E?a.className="ship":"hit"===t[e][r]?a.className="hit":"miss"===t[e][r]?a.className="miss":a.className="empty",a.classList.add("cells"),a.classList.add("player-1-cells"),n.appendChild(a)}}function C(e){const n=document.getElementById("player-2-board");n.innerHTML="";let t=e.getBoard();for(let e=0;e<10;e++)for(let r=0;r<10;r++){const a=document.createElement("div");a.dataset.row=e,a.dataset.col=r,t[e][r]instanceof E?a.className="ship":"hit"===t[e][r]?a.className="hit":"miss"===t[e][r]?a.className="miss":a.className="empty",a.classList.add("cells"),a.classList.add("player-2-cells"),n.appendChild(a)}}const v=new g("Player 1"),b=new g("Player 2");function x(e,n,t,r){e.fireShot(t,r,n),B(v),C(b)}!function(){console.log("Game started"),function(){const e=new E(5),n=new E(4),t=new E(3),r=new E(3),a=new E(2);v.playerPlaceShip(e,0,0,"horizontal"),v.playerPlaceShip(n,1,0,"horizontal"),v.playerPlaceShip(t,2,0,"horizontal"),v.playerPlaceShip(r,3,0,"horizontal"),v.playerPlaceShip(a,4,0,"horizontal"),b.playerPlaceShip(e,0,4,"vertical"),b.playerPlaceShip(n,1,2,"vertical"),b.playerPlaceShip(t,2,3,"vertical"),b.playerPlaceShip(r,3,7,"vertical"),b.playerPlaceShip(a,4,9,"vertical"),B(v),C(b)}();let e=!0;const n=document.getElementById("player-1-board"),t=document.getElementById("player-2-board");n?n.addEventListener("click",(n=>{const t=parseInt(n.target.dataset.row),r=parseInt(n.target.dataset.col);e||(x(b,v.gameBoard,t,r),e=!0)})):console.error("Player 1 board not found"),t?t.addEventListener("click",(n=>{const t=parseInt(n.target.dataset.row),r=parseInt(n.target.dataset.col);e&&(x(v,b.gameBoard,t,r),e=!1)})):console.error("Player 2 board not found")}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,