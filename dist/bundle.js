(()=>{"use strict";var e={208:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([e.id,"/* style.css */\n\n/* Add your CSS styles here */\nbody {\n  font-family: Arial, sans-serif;\n  background-color: #f2f2f2;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: #333;\n  text-align: center;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n/* Add more styles as needed */\n#game-board {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  grid-gap: 10px;\n  justify-items: center;\n  align-items: center;\n}\n\n.player-board {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  gap: 1px;\n}\n\n.cells {\n  border: 1px solid;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 30px;\n  font-weight: bold;\n  background-color: #dad2d2;\n}\n.cells:hover {\n  background-color: #665e5e;\n}\n.ship {\n  background-color: #3e4640; /* Grey for ships */\n}\n\n.hit {\n  background-color: #f00; /* Red for hits */\n}\n\n.miss {\n  background-color: #0f0; /* Green for misses */\n}\n\n.empty {\n  background-color: #dad2d2; /* White for empty cells */\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,cAAc;;AAEd,6BAA6B;AAC7B;EACE,8BAA8B;EAC9B,yBAAyB;EACzB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,cAAc;EACd,aAAa;AACf;;AAEA,8BAA8B;AAC9B;EACE,aAAa;EACb,qCAAqC;EACrC,kCAAkC;EAClC,cAAc;EACd,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,QAAQ;AACV;;AAEA;EACE,iBAAiB;EACjB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,iBAAiB;EACjB,yBAAyB;AAC3B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB,EAAE,mBAAmB;AAChD;;AAEA;EACE,sBAAsB,EAAE,iBAAiB;AAC3C;;AAEA;EACE,sBAAsB,EAAE,qBAAqB;AAC/C;;AAEA;EACE,yBAAyB,EAAE,0BAA0B;AACvD",sourcesContent:["/* style.css */\n\n/* Add your CSS styles here */\nbody {\n  font-family: Arial, sans-serif;\n  background-color: #f2f2f2;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: #333;\n  text-align: center;\n}\n\n.container {\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n/* Add more styles as needed */\n#game-board {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  grid-gap: 10px;\n  justify-items: center;\n  align-items: center;\n}\n\n.player-board {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  gap: 1px;\n}\n\n.cells {\n  border: 1px solid;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 30px;\n  font-weight: bold;\n  background-color: #dad2d2;\n}\n.cells:hover {\n  background-color: #665e5e;\n}\n.ship {\n  background-color: #3e4640; /* Grey for ships */\n}\n\n.hit {\n  background-color: #f00; /* Red for hits */\n}\n\n.miss {\n  background-color: #0f0; /* Green for misses */\n}\n\n.empty {\n  background-color: #dad2d2; /* White for empty cells */\n}\n"],sourceRoot:""}]);const s=i},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],d=o[c]||0,A="".concat(c," ").concat(d);o[c]=d+1;var p=t(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=a(u,r);r.byIndex=s,n.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=t(o[i]);n[s].references--}for(var l=r(e,a),c=0;c<o.length;c++){var d=t(o[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=l}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;const r=class{constructor(){this.board=new Array(10).fill(null).map((()=>new Array(10).fill(null))),this.missedAttacks=[],this.ships=[]}placeShip(e,n,t,r){if(n<0||n>9||t<0||t>9)throw new Error("Invalid row or column");if("vertical"===r){if(n+(e.length-1)>9)return!1;for(let r=0;r<e.length;r++)if(this.board[n+r][t])return!1;for(let r=0;r<e.length;r++)this.board[n+r][t]=e}else{if(t+(e.length-1)>9)return!1;for(let r=0;r<e.length;r++)if(this.board[n][t+r])return!1;for(let r=0;r<e.length;r++)this.board[n][t+r]=e}return this.ships.push(e),!0}receiveAttack(e,n){if(e<0||e>9||n<0||n>9)throw new Error("Invalid row or column");return null===this.board[e][n]?(this.missedAttacks.push([e,n]),this.board[e][n]="miss",!0):"hit"!==this.board[e][n]&&("miss"!==this.board[e][n]&&(this.board[e][n].hit(),this.board[e][n]="hit",!0))}allShipsSunk(){return this.ships.every((e=>e.isSunk()))}},a=class{constructor(e){this.name=e,this.gameBoard=new r}fireShot(e,n,t){return t.receiveAttack(e,n)}playerPlaceShip(e,n,t,r){this.gameBoard.placeShip(e,n,t,r)}getBoard(){return this.gameBoard.board}},o=class{constructor(e){this.length=e,this.hits=0}hit(){this.isSunk()||this.hits++}isSunk(){return this.hits===this.length}};var i=t(72),s=t.n(i),l=t(825),c=t.n(l),d=t(659),A=t.n(d),p=t(56),u=t.n(p),m=t(540),h=t.n(m),f=t(113),y=t.n(f),g=t(208),C={};function E(e){const n=document.getElementById("player-1-board");n.innerHTML="";let t=e.getBoard();for(let e=0;e<10;e++)for(let r=0;r<10;r++){const a=document.createElement("div");a.dataset.row=e,a.dataset.col=r,t[e][r]instanceof o?a.className="ship":"hit"===t[e][r]?a.className="hit":"miss"===t[e][r]?a.className="miss":a.className="empty",a.classList.add("cells"),a.classList.add("player-1-cells"),n.appendChild(a)}}function B(e){const n=document.getElementById("player-2-board");n.innerHTML="";let t=e.getBoard();for(let e=0;e<10;e++)for(let r=0;r<10;r++){const a=document.createElement("div");a.dataset.row=e,a.dataset.col=r,t[e][r]instanceof o||("hit"===t[e][r]?a.className="hit":"miss"===t[e][r]?a.className="miss":a.className="empty"),a.classList.add("cells"),a.classList.add("player-2-cells"),n.appendChild(a)}}C.styleTagTransform=y(),C.setAttributes=u(),C.insert=A().bind(null,"head"),C.domAPI=c(),C.insertStyleElement=h(),s()(g.A,C),g.A&&g.A.locals&&g.A.locals;const v=new a("Player 1"),b=new a("Player 2");function x(e,n,t,r){let a=e.fireShot(t,r,n);return E(v),B(b),a}const S=function(){(function(){let e=document.createElement("h1");e.textContent="Battleship",document.body.appendChild(e);let n=document.createElement("div");n.id="game-board",document.body.appendChild(n);let t=document.createElement("div");t.classList.add("player-board");let r=document.createElement("div");r.classList.add("player-board"),n.appendChild(t),n.appendChild(r);let a=document.createElement("h2");a.textContent="Player 1's Board";let o=document.createElement("h2");o.textContent="Player 2's Board",t.appendChild(a),r.appendChild(o);let i=document.createElement("div");i.id="player-1-board",i.classList.add("board"),t.appendChild(i);let s=document.createElement("div");s.id="player-2-board",s.classList.add("board"),r.appendChild(s)})(),console.log("Game started"),function(){const e=new o(5),n=new o(4),t=new o(3),r=new o(3),a=new o(2);v.playerPlaceShip(e,0,0,"horizontal"),v.playerPlaceShip(n,1,0,"horizontal"),v.playerPlaceShip(t,2,0,"horizontal"),v.playerPlaceShip(r,3,0,"horizontal"),v.playerPlaceShip(a,4,0,"horizontal"),b.playerPlaceShip(e,0,4,"vertical"),b.playerPlaceShip(n,1,2,"vertical"),b.playerPlaceShip(t,2,3,"vertical"),b.playerPlaceShip(r,3,7,"vertical"),b.playerPlaceShip(a,4,9,"vertical"),E(v),B(b)}();let e=!0,n=!1;document.getElementById("player-1-board");const t=document.getElementById("player-2-board");function r(){if(!e){let t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),a=x(b,v.gameBoard,t,r);for(;!1===a;)t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),a=x(b,v.gameBoard,t,r);v.gameBoard.allShipsSunk()?(n=!0,console.log("Computer wins!")):e=!0}}t?t.addEventListener("click",(function(t){if(e&&!n){let a=parseInt(t.target.dataset.row),o=parseInt(t.target.dataset.col);if(!1===x(v,b.gameBoard,a,o))return void console.log("Invalid move! Try again.");b.gameBoard.allShipsSunk()?(n=!0,console.log("Player 1 wins!")):(e=!1,setTimeout(r,500))}})):console.error("Player 2 board not found")};!function(){console.log("Game Menu");let e=document.createElement("button");e.textContent="Start Game",e.addEventListener("click",(()=>{S(),e.parentNode.removeChild(e)})),document.body.appendChild(e);let n=document.createElement("div");n.style.display="flex",n.style.justifyContent="center",n.style.alignItems="center",n.appendChild(e),document.body.appendChild(n)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUIsU0FDM0JGLEVBQUk1SCxNQUFNK0gsV0FBYSxTQUd2QkgsRUFBSWhILFlBQVkrRyxHQUdoQnhILFNBQVMwRixLQUFLakYsWUFBWWdILEVBQzVCLENDeEJBLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY2xhc3Nlcy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jbGFzc2VzL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2NsYXNzZXMvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvdXRpbHMvZG9tTWFuZ2VyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZU1vZHVsZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVNZW51LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8qIHN0eWxlLmNzcyAqL1xuXG4vKiBBZGQgeW91ciBDU1Mgc3R5bGVzIGhlcmUgKi9cbmJvZHkge1xuICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuaDEge1xuICBjb2xvcjogIzMzMztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiA5NjBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmc6IDIwcHg7XG59XG5cbi8qIEFkZCBtb3JlIHN0eWxlcyBhcyBuZWVkZWQgKi9cbiNnYW1lLWJvYXJkIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMiwgMWZyKTtcbiAgZ3JpZC1nYXA6IDEwcHg7XG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLnBsYXllci1ib2FyZCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4uYm9hcmQge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcbiAgZ2FwOiAxcHg7XG59XG5cbi5jZWxscyB7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA1MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAzMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhZDJkMjtcbn1cbi5jZWxsczpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM2NjVlNWU7XG59XG4uc2hpcCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMzZTQ2NDA7IC8qIEdyZXkgZm9yIHNoaXBzICovXG59XG5cbi5oaXQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjAwOyAvKiBSZWQgZm9yIGhpdHMgKi9cbn1cblxuLm1pc3Mge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGYwOyAvKiBHcmVlbiBmb3IgbWlzc2VzICovXG59XG5cbi5lbXB0eSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNkYWQyZDI7IC8qIFdoaXRlIGZvciBlbXB0eSBjZWxscyAqL1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGNBQWM7O0FBRWQsNkJBQTZCO0FBQzdCO0VBQ0UsOEJBQThCO0VBQzlCLHlCQUF5QjtFQUN6QixTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBO0VBQ0UsV0FBVztFQUNYLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2QsYUFBYTtBQUNmOztBQUVBLDhCQUE4QjtBQUM5QjtFQUNFLGFBQWE7RUFDYixxQ0FBcUM7RUFDckMsa0NBQWtDO0VBQ2xDLGNBQWM7RUFDZCxxQkFBcUI7RUFDckIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNDQUFzQztFQUN0QyxRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsV0FBVztFQUNYLFlBQVk7RUFDWixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLHlCQUF5QjtBQUMzQjtBQUNBO0VBQ0UseUJBQXlCO0FBQzNCO0FBQ0E7RUFDRSx5QkFBeUIsRUFBRSxtQkFBbUI7QUFDaEQ7O0FBRUE7RUFDRSxzQkFBc0IsRUFBRSxpQkFBaUI7QUFDM0M7O0FBRUE7RUFDRSxzQkFBc0IsRUFBRSxxQkFBcUI7QUFDL0M7O0FBRUE7RUFDRSx5QkFBeUIsRUFBRSwwQkFBMEI7QUFDdkRcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogc3R5bGUuY3NzICovXFxuXFxuLyogQWRkIHlvdXIgQ1NTIHN0eWxlcyBoZXJlICovXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuaDEge1xcbiAgY29sb3I6ICMzMzM7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5jb250YWluZXIge1xcbiAgbWF4LXdpZHRoOiA5NjBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZzogMjBweDtcXG59XFxuXFxuLyogQWRkIG1vcmUgc3R5bGVzIGFzIG5lZWRlZCAqL1xcbiNnYW1lLWJvYXJkIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMiwgMWZyKTtcXG4gIGdyaWQtZ2FwOiAxMHB4O1xcbiAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnBsYXllci1ib2FyZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmJvYXJkIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcXG4gIGdhcDogMXB4O1xcbn1cXG5cXG4uY2VsbHMge1xcbiAgYm9yZGVyOiAxcHggc29saWQ7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDMwcHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYWQyZDI7XFxufVxcbi5jZWxsczpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjY1ZTVlO1xcbn1cXG4uc2hpcCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2U0NjQwOyAvKiBHcmV5IGZvciBzaGlwcyAqL1xcbn1cXG5cXG4uaGl0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMDA7IC8qIFJlZCBmb3IgaGl0cyAqL1xcbn1cXG5cXG4ubWlzcyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGYwOyAvKiBHcmVlbiBmb3IgbWlzc2VzICovXFxufVxcblxcbi5lbXB0eSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGFkMmQyOyAvKiBXaGl0ZSBmb3IgZW1wdHkgY2VsbHMgKi9cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImV4cG9ydCBjbGFzcyBHYW1lQm9hcmQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyAyRCAxMHgxMCBhcnJheSwgaW5pdGlhbGl6aW5nIHdpdGggbnVsbCB0byByZXByZXNlbnQgZW1wdHkgc3BvdHNcbiAgICB0aGlzLmJvYXJkID0gbmV3IEFycmF5KDEwKS5maWxsKG51bGwpLm1hcCgoKSA9PiBuZXcgQXJyYXkoMTApLmZpbGwobnVsbCkpO1xuICAgIHRoaXMubWlzc2VkQXR0YWNrcyA9IFtdO1xuICAgIHRoaXMuc2hpcHMgPSBbXTtcbiAgfVxuXG4gIHBsYWNlU2hpcChzaGlwLCByb3csIGNvbCwgb3JpZW50YXRpb24pIHtcbiAgICAvLyB0aHJvdyBhbiBlcnJvciBpZiByb3cgb3IgY29sdW1uIGFyZSBub3QgdmFsaWRcbiAgICBpZiAocm93IDwgMCB8fCByb3cgPiA5IHx8IGNvbCA8IDAgfHwgY29sID4gOSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByb3cgb3IgY29sdW1uXCIpO1xuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIHRoaXMgcGxhY2UgYWNjb3JkaW5nIHRvIG9yaWVudGF0aW9uXG4gICAgaWYgKG9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGVub3VnaCBzcGFjZSBmb3IgdGhlIHNoaXAgdmVydGljYWxseVxuICAgICAgaWYgKHJvdyArIChzaGlwLmxlbmd0aCAtIDEpID4gOSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBzaGlwIGFscmVhZHkgdGhlcmVcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5ib2FyZFtyb3cgKyBpXVtjb2xdKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHBsYWNlIHRoZSBzaGlwIG9uIGJvYXJkXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ib2FyZFtyb3cgKyBpXVtjb2xdID0gc2hpcDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgZW5vdWdoIHNwYWNlIGZvciB0aGUgc2hpcCBob3Jpem9udGFsbHlcbiAgICAgIGlmIChjb2wgKyAoc2hpcC5sZW5ndGggLSAxKSA+IDkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhbnkgc2hpcCBhbHJlYWR5IHRoZXJlXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuYm9hcmRbcm93XVtjb2wgKyBpXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwbGFjZSB0aGUgc2hpcCBvbiBib2FyZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuYm9hcmRbcm93XVtjb2wgKyBpXSA9IHNoaXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zaGlwcy5wdXNoKHNoaXApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmVjZWl2ZUF0dGFjayhyb3csIGNvbCkge1xuICAgIC8vIHRocm93IGFuIGVycm9yIGlmIHJvdyBvciBjb2x1bW4gYXJlIG5vdCB2YWxpZFxuICAgIGlmIChyb3cgPCAwIHx8IHJvdyA+IDkgfHwgY29sIDwgMCB8fCBjb2wgPiA5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJvdyBvciBjb2x1bW5cIik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYm9hcmRbcm93XVtjb2xdID09PSBudWxsKSB7XG4gICAgICB0aGlzLm1pc3NlZEF0dGFja3MucHVzaChbcm93LCBjb2xdKTtcbiAgICAgIHRoaXMuYm9hcmRbcm93XVtjb2xdID0gXCJtaXNzXCI7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYm9hcmRbcm93XVtjb2xdID09PSBcImhpdFwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLmJvYXJkW3Jvd11bY29sXSA9PT0gXCJtaXNzXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2hpcCA9IHRoaXMuYm9hcmRbcm93XVtjb2xdO1xuICAgICAgc2hpcC5oaXQoKTtcbiAgICAgIHRoaXMuYm9hcmRbcm93XVtjb2xdID0gXCJoaXRcIjtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGFsbFNoaXBzU3VuaygpIHtcbiAgICByZXR1cm4gdGhpcy5zaGlwcy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc1N1bmsoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR2FtZUJvYXJkO1xuIiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcblxuLy8gRGVmaW5lIHRoZSBQbGF5ZXIgY2xhc3MgdG8gaGFuZGxlIHBsYXllciBhY3Rpb25zIGFuZCBnYW1lIGxvZ2ljXG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmdhbWVCb2FyZCA9IG5ldyBHYW1lQm9hcmQoKTtcbiAgfVxuXG4gIC8vIE1ldGhvZCB0byBmaXJlIGEgc2hvdCBvbiB0aGUgZW5lbXkgZ2FtZSBib2FyZFxuICBmaXJlU2hvdChyb3csIGNvbCwgZW5lbXlHYW1lQm9hcmQpIHtcbiAgICByZXR1cm4gZW5lbXlHYW1lQm9hcmQucmVjZWl2ZUF0dGFjayhyb3csIGNvbCk7XG4gIH1cbiAgLy8gTWV0aG9kIHRvIHBsYWNlIGEgc2hpcCBvbiB0aGUgcGxheWVyJ3MgZ2FtZSBib2FyZFxuICBwbGF5ZXJQbGFjZVNoaXAoc2hpcCwgcm93LCBjb2wsIG9yaWVudGF0aW9uKSB7XG4gICAgdGhpcy5nYW1lQm9hcmQucGxhY2VTaGlwKHNoaXAsIHJvdywgY29sLCBvcmllbnRhdGlvbik7XG4gIH1cblxuICBnZXRCb2FyZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nYW1lQm9hcmQuYm9hcmQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuIiwiZXhwb3J0IGNsYXNzIFNoaXAge1xuICBjb25zdHJ1Y3RvcihsZW5ndGgpIHtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB0aGlzLmhpdHMgPSAwO1xuICB9XG5cbiAgaGl0KCkge1xuICAgIGlmICh0aGlzLmlzU3VuaygpKSByZXR1cm47XG4gICAgdGhpcy5oaXRzKys7XG4gIH1cblxuICBpc1N1bmsoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGl0cyA9PT0gdGhpcy5sZW5ndGg7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBTaGlwO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBTaGlwIGZyb20gXCIuLi9jbGFzc2VzL3NoaXBcIjtcbmltcG9ydCBzdHlsZSBmcm9tIFwiLi4vc3R5bGUuY3NzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheUdhbWUoKSB7XG4gIGxldCBUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgVGl0bGUudGV4dENvbnRlbnQgPSBcIkJhdHRsZXNoaXBcIjtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChUaXRsZSk7XG4gIGxldCBnYW1lQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZ2FtZUNvbnRhaW5lci5pZCA9IFwiZ2FtZS1ib2FyZFwiO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGdhbWVDb250YWluZXIpO1xuICBsZXQgcGxheWVyQm9hcmQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcGxheWVyQm9hcmQxLmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXItYm9hcmRcIik7XG4gIGxldCBwbGF5ZXJCb2FyZDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBwbGF5ZXJCb2FyZDIuY2xhc3NMaXN0LmFkZChcInBsYXllci1ib2FyZFwiKTtcblxuICBnYW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsYXllckJvYXJkMSk7XG4gIGdhbWVDb250YWluZXIuYXBwZW5kQ2hpbGQocGxheWVyQm9hcmQyKTtcblxuICBsZXQgcGxheWVyMVRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuICBwbGF5ZXIxVGl0bGUudGV4dENvbnRlbnQgPSBcIlBsYXllciAxJ3MgQm9hcmRcIjtcbiAgbGV0IHBsYXllcjJUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgcGxheWVyMlRpdGxlLnRleHRDb250ZW50ID0gXCJQbGF5ZXIgMidzIEJvYXJkXCI7XG4gIHBsYXllckJvYXJkMS5hcHBlbmRDaGlsZChwbGF5ZXIxVGl0bGUpO1xuICBwbGF5ZXJCb2FyZDIuYXBwZW5kQ2hpbGQocGxheWVyMlRpdGxlKTtcblxuICBsZXQgcGxheWVyMUJvYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcGxheWVyMUJvYXJkLmlkID0gXCJwbGF5ZXItMS1ib2FyZFwiO1xuICBwbGF5ZXIxQm9hcmQuY2xhc3NMaXN0LmFkZChcImJvYXJkXCIpO1xuICBwbGF5ZXJCb2FyZDEuYXBwZW5kQ2hpbGQocGxheWVyMUJvYXJkKTtcbiAgbGV0IHBsYXllcjJCb2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHBsYXllcjJCb2FyZC5pZCA9IFwicGxheWVyLTItYm9hcmRcIjtcbiAgcGxheWVyMkJvYXJkLmNsYXNzTGlzdC5hZGQoXCJib2FyZFwiKTtcbiAgcGxheWVyQm9hcmQyLmFwcGVuZENoaWxkKHBsYXllcjJCb2FyZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJQbGF5ZXIxR2FtZUJvYXJkKHBsYXllcikge1xuICAvLyBHZXQgdGhlIGdhbWUgYm9hcmQgZWxlbWVudCBmcm9tIHRoZSBIVE1MXG4gIGNvbnN0IGdhbWVCb2FyZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllci0xLWJvYXJkXCIpO1xuXG4gIC8vIENsZWFyIHRoZSBleGlzdGluZyBjb250ZW50IG9mIHRoZSBnYW1lIGJvYXJkXG4gIGdhbWVCb2FyZEVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcblxuICBsZXQgZ2FtZUJvYXJkID0gcGxheWVyLmdldEJvYXJkKCk7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggcm93IGFuZCBjb2x1bW4gb2YgdGhlIHBsYXllcidzIGdhbWUgYm9hcmRcbiAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKSB7XG4gICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgMTA7IGNvbCsrKSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgY2VsbCBlbGVtZW50IGZvciBlYWNoIHBvc2l0aW9uIG9uIHRoZSBnYW1lIGJvYXJkXG4gICAgICBjb25zdCBjZWxsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgIGNlbGxFbGVtZW50LmRhdGFzZXQucm93ID0gcm93O1xuICAgICAgY2VsbEVsZW1lbnQuZGF0YXNldC5jb2wgPSBjb2w7XG5cbiAgICAgIGlmIChnYW1lQm9hcmRbcm93XVtjb2xdIGluc3RhbmNlb2YgU2hpcCkge1xuICAgICAgICBjZWxsRWxlbWVudC5jbGFzc05hbWUgPSBcInNoaXBcIjtcbiAgICAgIH0gZWxzZSBpZiAoZ2FtZUJvYXJkW3Jvd11bY29sXSA9PT0gXCJoaXRcIikge1xuICAgICAgICBjZWxsRWxlbWVudC5jbGFzc05hbWUgPSBcImhpdFwiO1xuICAgICAgfSBlbHNlIGlmIChnYW1lQm9hcmRbcm93XVtjb2xdID09PSBcIm1pc3NcIikge1xuICAgICAgICBjZWxsRWxlbWVudC5jbGFzc05hbWUgPSBcIm1pc3NcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbGxFbGVtZW50LmNsYXNzTmFtZSA9IFwiZW1wdHlcIjtcbiAgICAgIH1cbiAgICAgIGNlbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjZWxsc1wiKTtcbiAgICAgIGNlbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXItMS1jZWxsc1wiKTtcbiAgICAgIC8vIEFwcGVuZCB0aGUgY2VsbCBlbGVtZW50IHRvIHRoZSBnYW1lIGJvYXJkIGVsZW1lbnRcbiAgICAgIGdhbWVCb2FyZEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2VsbEVsZW1lbnQpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUGxheWVyMkdhbWVCb2FyZChwbGF5ZXIpIHtcbiAgLy8gR2V0IHRoZSBnYW1lIGJvYXJkIGVsZW1lbnQgZnJvbSB0aGUgSFRNTFxuICBjb25zdCBnYW1lQm9hcmRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXItMi1ib2FyZFwiKTtcblxuICAvLyBDbGVhciB0aGUgZXhpc3RpbmcgY29udGVudCBvZiB0aGUgZ2FtZSBib2FyZFxuICBnYW1lQm9hcmRFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG4gIGxldCBnYW1lQm9hcmQgPSBwbGF5ZXIuZ2V0Qm9hcmQoKTtcblxuICAvLyBMb29wIHRocm91Z2ggZWFjaCByb3cgYW5kIGNvbHVtbiBvZiB0aGUgcGxheWVyJ3MgZ2FtZSBib2FyZFxuICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93KyspIHtcbiAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCAxMDsgY29sKyspIHtcbiAgICAgIC8vIENyZWF0ZSBhIG5ldyBjZWxsIGVsZW1lbnQgZm9yIGVhY2ggcG9zaXRpb24gb24gdGhlIGdhbWUgYm9hcmRcbiAgICAgIGNvbnN0IGNlbGxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNlbGxFbGVtZW50LmRhdGFzZXQucm93ID0gcm93O1xuICAgICAgY2VsbEVsZW1lbnQuZGF0YXNldC5jb2wgPSBjb2w7XG5cbiAgICAgIC8vIFNldCB0aGUgY2xhc3Mgb2YgdGhlIGNlbGwgZWxlbWVudCBiYXNlZCBvbiB0aGUgdmFsdWUgaW4gdGhlIGdhbWUgYm9hcmRcbiAgICAgIGlmIChnYW1lQm9hcmRbcm93XVtjb2xdIGluc3RhbmNlb2YgU2hpcCkge1xuICAgICAgfSBlbHNlIGlmIChnYW1lQm9hcmRbcm93XVtjb2xdID09PSBcImhpdFwiKSB7XG4gICAgICAgIGNlbGxFbGVtZW50LmNsYXNzTmFtZSA9IFwiaGl0XCI7XG4gICAgICB9IGVsc2UgaWYgKGdhbWVCb2FyZFtyb3ddW2NvbF0gPT09IFwibWlzc1wiKSB7XG4gICAgICAgIGNlbGxFbGVtZW50LmNsYXNzTmFtZSA9IFwibWlzc1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2VsbEVsZW1lbnQuY2xhc3NOYW1lID0gXCJlbXB0eVwiO1xuICAgICAgfVxuICAgICAgY2VsbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNlbGxzXCIpO1xuICAgICAgY2VsbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBsYXllci0yLWNlbGxzXCIpO1xuICAgICAgLy8gQXBwZW5kIHRoZSBjZWxsIGVsZW1lbnQgdG8gdGhlIGdhbWUgYm9hcmQgZWxlbWVudFxuICAgICAgZ2FtZUJvYXJkRWxlbWVudC5hcHBlbmRDaGlsZChjZWxsRWxlbWVudCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgcmVuZGVyUGxheWVyMUdhbWVCb2FyZCwgcmVuZGVyUGxheWVyMkdhbWVCb2FyZCwgZGlzcGxheUdhbWUgfTtcbiIsImltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vY2xhc3Nlcy9wbGF5ZXJcIjtcbmltcG9ydCBTaGlwIGZyb20gXCIuL2NsYXNzZXMvc2hpcFwiO1xuaW1wb3J0IHtcbiAgcmVuZGVyUGxheWVyMUdhbWVCb2FyZCxcbiAgcmVuZGVyUGxheWVyMkdhbWVCb2FyZCxcbiAgZGlzcGxheUdhbWUsXG59IGZyb20gXCIuL3V0aWxzL2RvbU1hbmdlclwiO1xuXG4vLyBjcmVhdGUgcGxheWVyc1xuY29uc3QgcGxheWVyMSA9IG5ldyBQbGF5ZXIoXCJQbGF5ZXIgMVwiKTtcbmNvbnN0IHBsYXllcjIgPSBuZXcgUGxheWVyKFwiUGxheWVyIDJcIik7XG4vLyBDcmVhdGUgZ2FtZWJvYXJkXG5mdW5jdGlvbiBpbml0KCkge1xuICAvLyBDcmVhdGUgc2hpcHNcbiAgY29uc3Qgc2hpcDEgPSBuZXcgU2hpcCg1KTtcbiAgY29uc3Qgc2hpcDIgPSBuZXcgU2hpcCg0KTtcbiAgY29uc3Qgc2hpcDMgPSBuZXcgU2hpcCgzKTtcbiAgY29uc3Qgc2hpcDQgPSBuZXcgU2hpcCgzKTtcbiAgY29uc3Qgc2hpcDUgPSBuZXcgU2hpcCgyKTtcblxuICAvLyBBZGQgc2hpcHMgdG8gcGxheWVyIDEgZ2FtZWJvYXJkXG4gIHBsYXllcjEucGxheWVyUGxhY2VTaGlwKHNoaXAxLCAwLCAwLCBcImhvcml6b250YWxcIik7XG4gIHBsYXllcjEucGxheWVyUGxhY2VTaGlwKHNoaXAyLCAxLCAwLCBcImhvcml6b250YWxcIik7XG4gIHBsYXllcjEucGxheWVyUGxhY2VTaGlwKHNoaXAzLCAyLCAwLCBcImhvcml6b250YWxcIik7XG4gIHBsYXllcjEucGxheWVyUGxhY2VTaGlwKHNoaXA0LCAzLCAwLCBcImhvcml6b250YWxcIik7XG4gIHBsYXllcjEucGxheWVyUGxhY2VTaGlwKHNoaXA1LCA0LCAwLCBcImhvcml6b250YWxcIik7XG5cbiAgLy8gQWRkIHNoaXBzIHRvIHBsYXllciAyIGdhbWVib2FyZFxuICBwbGF5ZXIyLnBsYXllclBsYWNlU2hpcChzaGlwMSwgMCwgNCwgXCJ2ZXJ0aWNhbFwiKTtcbiAgcGxheWVyMi5wbGF5ZXJQbGFjZVNoaXAoc2hpcDIsIDEsIDIsIFwidmVydGljYWxcIik7XG4gIHBsYXllcjIucGxheWVyUGxhY2VTaGlwKHNoaXAzLCAyLCAzLCBcInZlcnRpY2FsXCIpO1xuICBwbGF5ZXIyLnBsYXllclBsYWNlU2hpcChzaGlwNCwgMywgNywgXCJ2ZXJ0aWNhbFwiKTtcbiAgcGxheWVyMi5wbGF5ZXJQbGFjZVNoaXAoc2hpcDUsIDQsIDksIFwidmVydGljYWxcIik7XG5cbiAgLy8gUmVuZGVyIGdhbWUgYm9hcmRzXG4gIHJlbmRlclBsYXllcjFHYW1lQm9hcmQocGxheWVyMSk7XG4gIHJlbmRlclBsYXllcjJHYW1lQm9hcmQocGxheWVyMik7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGhhbmRsZSBwbGF5ZXIncyB0dXJuXG5mdW5jdGlvbiBwbGF5ZXJIaXQocGxheWVyLCBlbmVteUJvYXJkLCByb3csIGNvbCkge1xuICBsZXQgcmVzdWx0ID0gcGxheWVyLmZpcmVTaG90KHJvdywgY29sLCBlbmVteUJvYXJkKTtcbiAgcmVuZGVyUGxheWVyMUdhbWVCb2FyZChwbGF5ZXIxKTtcbiAgcmVuZGVyUGxheWVyMkdhbWVCb2FyZChwbGF5ZXIyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc3RhcnRHYW1lKCkge1xuICAvLyBJbml0aWFsaXplIGdhbWVcbiAgZGlzcGxheUdhbWUoKTtcbiAgY29uc29sZS5sb2coXCJHYW1lIHN0YXJ0ZWRcIik7XG4gIGluaXQoKTtcbiAgbGV0IHBsYXllcjFUdXJuID0gdHJ1ZTtcbiAgbGV0IGdhbWVPdmVyID0gZmFsc2U7XG5cbiAgLy8gR2V0IHRoZSBwYXJlbnQgZWxlbWVudHMgb2YgdGhlIGdhbWUgYm9hcmRzXG4gIGNvbnN0IHBsYXllcjFCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWVyLTEtYm9hcmRcIik7XG4gIGNvbnN0IHBsYXllcjJCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWVyLTItYm9hcmRcIik7XG5cbiAgLy8gQ29tcHV0ZXIgdHVyblxuICBmdW5jdGlvbiBjb21wdXRlclR1cm4oKSB7XG4gICAgaWYgKCFwbGF5ZXIxVHVybikge1xuICAgICAgbGV0IHJhbmRvbVJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgIGxldCByYW5kb21Db2wgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgICBsZXQgcmVzdWx0ID0gcGxheWVySGl0KHBsYXllcjIsIHBsYXllcjEuZ2FtZUJvYXJkLCByYW5kb21Sb3csIHJhbmRvbUNvbCk7XG4gICAgICB3aGlsZSAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICByYW5kb21Sb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgICAgIHJhbmRvbUNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgICAgcmVzdWx0ID0gcGxheWVySGl0KHBsYXllcjIsIHBsYXllcjEuZ2FtZUJvYXJkLCByYW5kb21Sb3csIHJhbmRvbUNvbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwbGF5ZXIxLmdhbWVCb2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICBnYW1lT3ZlciA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ29tcHV0ZXIgd2lucyFcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGF5ZXIxVHVybiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUGxheWVyIHR1cm5cbiAgZnVuY3Rpb24gcGxheWVyVHVybihldmVudCkge1xuICAgIGlmIChwbGF5ZXIxVHVybiAmJiAhZ2FtZU92ZXIpIHtcbiAgICAgIGxldCByb3cgPSBwYXJzZUludChldmVudC50YXJnZXQuZGF0YXNldC5yb3cpO1xuICAgICAgbGV0IGNvbCA9IHBhcnNlSW50KGV2ZW50LnRhcmdldC5kYXRhc2V0LmNvbCk7XG4gICAgICBsZXQgcmVzdWx0ID0gcGxheWVySGl0KHBsYXllcjEsIHBsYXllcjIuZ2FtZUJvYXJkLCByb3csIGNvbCk7XG4gICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkludmFsaWQgbW92ZSEgVHJ5IGFnYWluLlwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBsYXllcjIuZ2FtZUJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XG4gICAgICAgIGdhbWVPdmVyID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5sb2coXCJQbGF5ZXIgMSB3aW5zIVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYXllcjFUdXJuID0gZmFsc2U7XG4gICAgICAgIHNldFRpbWVvdXQoY29tcHV0ZXJUdXJuLCA1MDApOyAvLyBEZWxheSBjb21wdXRlciB0dXJuIGZvciBiZXR0ZXIgVVhcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBdHRhY2ggZXZlbnQgbGlzdGVuZXIgdG8gcGxheWVyIDIncyBib2FyZCBmb3IgcGxheWVyIDEncyB0dXJuXG4gIGlmIChwbGF5ZXIyQm9hcmQpIHtcbiAgICBwbGF5ZXIyQm9hcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBsYXllclR1cm4pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJQbGF5ZXIgMiBib2FyZCBub3QgZm91bmRcIik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhcnRHYW1lO1xuIiwiaW1wb3J0IHN0YXJ0R2FtZSBmcm9tIFwiLi9nYW1lTW9kdWxlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1lTWVudSgpIHtcbiAgY29uc29sZS5sb2coXCJHYW1lIE1lbnVcIik7XG4gIC8vIGFkZCBhIGJ1dHRvbiB0byBzdGFydCBnYW1lXG4gIGxldCBzdGFydEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIHN0YXJ0QnV0dG9uLnRleHRDb250ZW50ID0gXCJTdGFydCBHYW1lXCI7XG4gIHN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgc3RhcnRHYW1lKCk7XG4gICAgLy8gcmVtb3ZlIHRoZSBidXR0b25cbiAgICBzdGFydEJ1dHRvbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0YXJ0QnV0dG9uKTtcbiAgfSk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3RhcnRCdXR0b24pO1xuICAvLyBjcmVhdGUgYSBkaXYgZWxlbWVudFxuICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAvLyBzdHlsZSB0aGUgZGl2XG4gIGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gIGRpdi5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiY2VudGVyXCI7XG4gIGRpdi5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcblxuICAvLyBhcHBlbmQgdGhlIHN0YXJ0IGJ1dHRvbiB0byB0aGUgZGl2XG4gIGRpdi5hcHBlbmRDaGlsZChzdGFydEJ1dHRvbik7XG5cbiAgLy8gYXBwZW5kIHRoZSBkaXYgdG8gdGhlIGJvZHlcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnYW1lTWVudTtcbiIsImltcG9ydCBnYW1lTWVudSBmcm9tIFwiLi9nYW1lTWVudVwiO1xuXG5nYW1lTWVudSgpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImNvbnN0cnVjdG9yIiwiYm9hcmQiLCJBcnJheSIsImZpbGwiLCJtaXNzZWRBdHRhY2tzIiwic2hpcHMiLCJwbGFjZVNoaXAiLCJzaGlwIiwicm93IiwiY29sIiwib3JpZW50YXRpb24iLCJyZWNlaXZlQXR0YWNrIiwiaGl0IiwiYWxsU2hpcHNTdW5rIiwiZXZlcnkiLCJpc1N1bmsiLCJuYW1lIiwiZ2FtZUJvYXJkIiwiZmlyZVNob3QiLCJlbmVteUdhbWVCb2FyZCIsInBsYXllclBsYWNlU2hpcCIsImdldEJvYXJkIiwiaGl0cyIsInJlbmRlclBsYXllcjFHYW1lQm9hcmQiLCJwbGF5ZXIiLCJnYW1lQm9hcmRFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJjZWxsRWxlbWVudCIsImRhdGFzZXQiLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW5kZXJQbGF5ZXIyR2FtZUJvYXJkIiwibG9jYWxzIiwicGxheWVyMSIsInBsYXllcjIiLCJwbGF5ZXJIaXQiLCJlbmVteUJvYXJkIiwiVGl0bGUiLCJ0ZXh0Q29udGVudCIsImJvZHkiLCJnYW1lQ29udGFpbmVyIiwicGxheWVyQm9hcmQxIiwicGxheWVyQm9hcmQyIiwicGxheWVyMVRpdGxlIiwicGxheWVyMlRpdGxlIiwicGxheWVyMUJvYXJkIiwicGxheWVyMkJvYXJkIiwiZGlzcGxheUdhbWUiLCJjb25zb2xlIiwibG9nIiwic2hpcDEiLCJzaGlwMiIsInNoaXAzIiwic2hpcDQiLCJzaGlwNSIsImluaXQiLCJwbGF5ZXIxVHVybiIsImdhbWVPdmVyIiwiY29tcHV0ZXJUdXJuIiwicmFuZG9tUm93IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tQ29sIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwicGFyc2VJbnQiLCJzZXRUaW1lb3V0IiwiZXJyb3IiLCJzdGFydEJ1dHRvbiIsImRpdiIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiXSwic291cmNlUm9vdCI6IiJ9